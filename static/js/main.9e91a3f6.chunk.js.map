{"version":3,"sources":["assets/data/text.js","components/Header.js","components/TextArea.js","components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["text","Header","class","TextArea","props","id","rows","value","textareaValue","onChange","updateTextareaValue","Preview","dangerouslySetInnerHTML","App","convert","__html","marked","state","e","setState","target","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAEeA,EAFJ,knECWIC,EATA,WAEb,OACE,yBAAKC,MAAM,UACT,oDCQSC,EAZE,SAACC,GAEhB,OACE,yBAAKF,MAAM,SACT,kDACA,8FACA,0EACA,8BAAUG,GAAG,SAASC,KAAK,KAAKC,MAAOH,EAAMI,cAAeC,SAAUL,EAAMM,qBAAsBN,EAAMI,iBCA/FG,EAPC,SAACP,GAEf,OACE,0BAAMC,GAAG,UAAUO,wBAAyBR,EAAMQ,2BC4CvCC,E,YAvCb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KAMRU,QAAU,WAER,MAAO,CACLC,OAFcC,IAAO,EAAKC,MAAMT,iBARjB,EAcnBE,oBAAsB,SAACQ,GACrB,EAAKC,SAAS,CACZX,cAAeU,EAAEE,OAAOb,SAd1B,EAAKU,MAAQ,CACXT,cAAeR,GAHA,E,sEAoBV,IACDQ,EAAkBa,KAAKJ,MAAvBT,cACN,OACE,yBAAKc,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKpB,MAAM,WACT,kBAAC,EAAD,CACEU,wBAAyBS,KAAKP,YAEhC,kBAAC,EAAD,CACEN,cAAiBA,EACjBE,oBAAuBW,KAAKX,4B,GAhCtBa,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9e91a3f6.chunk.js","sourcesContent":["let text = \"Top title\\n=======\\n\\nYou can make top title by set ============== below the text which you want to be a top title\\n\\nSubtitle\\n-----------\\n\\nYou can make subtitle by set ---------------- below the text which you want to be a Subtitle \\n\\n### Next deeper title\\n\\nYou can make next deeper title by using this sentence of signs ### before the text\\n\\n**Break Line**\\n\\nFor break line you must use this sign \\\\ and after that set letter 'n' without space\\n\\n**Graphic file**\\n\\n\\n![Some render picture](https://picsum.photos/600/300?grayscale 'Some render picture from Lorem picsum')\\n\\nFor add picture you must use this combination, without spaces:\\n\\n ! [ Title of photo for alt attribute] ( Link to photo 'Title of photo for title attribute' )\\n\\n**Attributes for formatting text**\\n\\nYou can use these attributes for text: *italic*, **bold**, \\n`monospace`, ~~strikethrough~~ .\\n\\nFor italic text you must use this sign * before and after word/text without space\\n\\nFor bold text you must use this two sign ** before and after word/text without space\\n\\nFor monosopace text you must use this sign ` before and after word/text without space\\n\\nFor strikethrough text you must use these two sign ~~ before and after word/text without space\\n\\nHere is some code block: ``This text is in `code` element now``.\\n\\n For set some text in code element, you must use this two signs `` after and before word/text, without space\\n\\n**Counted list**\\n\\n  1. bread\\n  2. butter\\n  3. milk\\n\\nFor making counted list you must use numbers and points before text and line break after text\\n\\n**Uncounted list**\\n\\n  * Jhon\\n  * Danny\\n  * Marry\\n\\nFor making uncounted list use this sign * and one space before text and line break after text\\n\\n**Linked email:**\\n\\n<fake@example.com>\\n\\nFor that you must use this sign < at the beginning of email address and this sign > at the end, without space.\\n\\n**Link:**\\n\\n[This is link to my portfolio website :)](https://hajczek.github.io/portfolio/)\\n\\nFor that you must use these signs: [ ], and inside them put text which will be a title of link. Then inside these () put url address for this link.\\n\\n\\n***Happy marked!!!***\";\r\n\r\nexport default text;","import React from 'react';\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <div class=\"header\">\r\n      <h1>Markdown Previewer</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst TextArea = (props) => {\r\n\r\n  return (\r\n    <div class=\"textA\">\r\n      <h2>Editor for content</h2>\r\n      <p>You can change a content of box on left side in textarea below.</p>\r\n      <p>Use markdown syntax to format your content.</p>\r\n      <textarea id=\"editor\" rows=\"30\" value={props.textareaValue} onChange={props.updateTextareaValue}>{props.textareaValue}</textarea>\r\n   </div>\r\n  )\r\n}\r\n\r\nexport default TextArea;","import React from 'react';\r\n\r\nconst Preview = (props) => {\r\n\r\n  return (\r\n    <span id=\"preview\" dangerouslySetInnerHTML={props.dangerouslySetInnerHTML} />\r\n  )\r\n}\r\n\r\nexport default Preview;","import React, { Component } from 'react';\nimport './assets/css/styles.css';\nimport './assets/css/normalize.css';\nimport marked from 'marked';\nimport text from './assets/data/text';\nimport Header from './components/Header';\nimport TextArea from './components/TextArea';\nimport Preview from './components/Preview';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textareaValue: text\n    }\n  }\n\n  convert = () => {\n    var clearText = marked(this.state.textareaValue);\n    return {\n      __html: clearText\n    };\n  }\n\n  updateTextareaValue = (e) => {\n    this.setState({\n      textareaValue: e.target.value\n    });\n  }\n\n  render(){\n    let { textareaValue } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <div class=\"content\">\n          <Preview\n            dangerouslySetInnerHTML={this.convert()} \n          />\n          <TextArea \n            textareaValue = {textareaValue}\n            updateTextareaValue = {this.updateTextareaValue}\n          />\n        </div>\n      </div>\n    )\n  } \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}